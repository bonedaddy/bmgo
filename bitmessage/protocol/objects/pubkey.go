package objects

import "github.com/ishbir/bmgo/bitmessage/protocol/types"

// When a node has the hash of a public key (from a version <= 3 address) but
// not the public key itself, it must send out a request for the public key.
type GetpubkeyV3 struct {
	// The ripemd hash of the public key. This field is only included when the
	// address version is <= 3.
	Ripe [20]byte
}

// When a node has the hash of a public key (from a version >= 4 address) but
// not the public key itself, it must send out a request for the public key.
type GetpubkeyV4 struct {
	// The tag derived from the address version, stream number, and ripe. This
	// field is only included when the address version is >= 4.
	Tag [32]byte
}

// Version 2, 3 and 4 public keys
type Pubkey interface {
	// What version of the pubkey is it?
	Version() int
	// Is the pubkey encrypted?
	IsEncrypted() bool
}

// A version 2 pubkey. This is still in use and supported by current clients but
// new v2 addresses are not generated by clients.
type PubkeyV2 struct {
	// A bitfield of optional behaviors and features that can be expected from
	// the node receiving the message.
	Behaviour uint32
	// The ECC public key used for signing (uncompressed format; normally
	// prepended with \x04 )
	PubSigningKey [64]byte
	// The ECC public key used for encryption (uncompressed format; normally
	// prepended with \x04 )
	PubEncryptionKey [64]byte
}

// A version 3 pubkey
type PubkeyV3 struct {
	// A bitfield of optional behaviors and features that can be expected from
	// the node receiving the message.
	Behaviour uint32
	// The ECC public key used for signing (uncompressed format; normally
	// prepended with \x04 )
	PubSigningKey [64]byte
	// The ECC public key used for encryption (uncompressed format; normally
	// prepended with \x04 )
	PubEncryptionKey [64]byte
	// Used to calculate the difficulty target of messages accepted by this
	// node. The higher this value, the more difficult the Proof of Work must be
	// before this individual will accept the message. This number is the
	// average number of nonce trials a node will have to perform to meet the
	// Proof of Work requirement. 1000 is the network minimum so any lower
	// values will be automatically raised to 1000.
	NonceTrialsPerByte types.Varint
	// Used to calculate the difficulty target of messages accepted by this
	// node. The higher this value, the more difficult the Proof of Work must be
	// before this individual will accept the message. This number is added to
	// the data length to make sending small messages more difficult. 1000 is
	// the network minimum so any lower values will be automatically raised to
	// 1000.
	ExtraBytes types.Varint
	// Length of the signature
	SigLength types.Varint
	// The ECDSA signature which, as of protocol v3, covers the object header
	// starting with the time, appended with the data described in this table
	// down to the extra_bytes.
	Signature []byte
}

// When version 4 pubkeys are created, most of the data in the pubkey is
// encrypted. This is done in such a way that only someone who has the
// Bitmessage address which corresponds to a pubkey can decrypt and use that
// pubkey. This prevents people from gathering pubkeys sent around the network
// and using the data from them to create messages to be used in spam or in
// flooding attacks.
type PubkeyEncryptedV4 struct {
	// The tag, made up of bytes 32-64 of the double hash of the address data.
	Tag [32]byte
	// Encrypted pubkey data.
	Data []byte
}

// When decrypted, a version 4 pubkey is the same as a verion 3 pubkey.
type PubkeyDecryptedV4 struct {
	PubkeyV3
}
